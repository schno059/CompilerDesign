
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\010\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\002\000\002\005\014" +
    "\000\002\005\014\000\002\006\004\000\002\006\002\000" +
    "\002\007\010\000\002\007\007\000\002\007\006\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\007" +
    "\006\000\002\007\007\000\002\007\004\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\007\000" +
    "\002\010\003\000\002\010\005\000\002\010\006\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\005\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\006\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\011\000" +
    "\002\011\003\000\002\012\003\000\002\013\003\000\002" +
    "\014\003\000\002\015\003\000\002\016\003\000\002\017" +
    "\003\000\002\017\006\000\002\020\005\000\002\020\003" +
    "\000\002\021\005\000\002\021\003\000\002\022\005\000" +
    "\002\022\003\000\002\023\002\000\002\024\005\000\002" +
    "\024\003\000\002\025\005\000\002\025\003\000\002\025" +
    "\002\000\002\026\005\000\002\027\004\000\002\027\002" +
    "\000\002\031\004\000\002\031\002\000\002\030\007\000" +
    "\002\030\005\000\002\032\004\000\002\032\006\000\002" +
    "\033\003\000\002\033\002\000\002\035\004\000\002\035" +
    "\002\000\002\034\003\000\002\034\002\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\004\021\005\001\002\000\004\002\303\001" +
    "\002\000\004\055\007\001\002\000\004\051\010\001\002" +
    "\000\062\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\053\uffcc\054\uffcc\001\002" +
    "\000\020\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\022" +
    "\uffb9\052\uffb9\001\002\000\020\014\016\015\025\016\017" +
    "\017\026\020\024\022\021\052\ufffd\001\002\000\004\052" +
    "\013\001\002\000\004\024\014\001\002\000\004\002\001" +
    "\001\002\000\016\014\016\015\025\016\017\017\026\022" +
    "\021\052\ufffd\001\002\000\006\050\uffae\055\uffae\001\002" +
    "\000\006\050\uffac\055\uffac\001\002\000\004\052\uffff\001" +
    "\002\000\004\055\007\001\002\000\004\055\007\001\002" +
    "\000\040\004\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\022\uffba" +
    "\051\uffba\052\uffba\055\uffba\001\002\000\012\014\016\015" +
    "\025\016\017\017\026\001\002\000\006\050\uffad\055\uffad" +
    "\001\002\000\006\050\uffab\055\uffab\001\002\000\004\055" +
    "\007\001\002\000\006\023\031\024\uffb1\001\002\000\026" +
    "\040\045\041\035\044\040\047\052\055\007\056\047\057" +
    "\051\060\044\061\050\062\043\001\002\000\004\024\033" +
    "\001\002\000\040\004\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\022\uffb8\051\uffb8\052\uffb8\055\uffb8\001\002\000\046\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\040\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\045\uffe7\046\uffe7\050\uffe7\054\uffe7\001\002\000\026" +
    "\040\045\041\035\044\040\047\052\055\007\056\047\057" +
    "\051\060\044\061\050\062\043\001\002\000\046\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\045\uffe6\046\uffe6\050\uffe6\054\uffe6\001\002\000\046\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\045\uffe5\046\uffe5\050\uffe5\054\uffe5\001\002\000\026" +
    "\040\045\041\035\044\040\047\052\055\007\056\047\057" +
    "\051\060\044\061\050\062\043\001\002\000\052\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\045\uffcb\046\uffcb\047\121\050\uffcb\053\120\054\uffcb\001" +
    "\002\000\034\024\uffb2\026\070\027\065\030\057\031\062" +
    "\032\074\033\066\034\072\035\061\040\060\041\063\045" +
    "\071\046\067\001\002\000\046\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\045\uffcd\046\uffcd" +
    "\050\uffcd\054\uffcd\001\002\000\046\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\045\uffcf\046" +
    "\uffcf\050\uffcf\054\uffcf\001\002\000\026\040\045\041\035" +
    "\044\040\047\052\055\007\056\047\057\051\060\044\061" +
    "\050\062\043\001\002\000\046\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\045\uffe4\046\uffe4" +
    "\050\uffe4\054\uffe4\001\002\000\046\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\045\uffd1\046" +
    "\uffd1\050\uffd1\054\uffd1\001\002\000\046\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\040\uffce\041\uffce\042\uffce\043\uffce\045\uffce" +
    "\046\uffce\050\uffce\054\uffce\001\002\000\046\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\045" +
    "\uffd0\046\uffd0\050\uffd0\054\uffd0\001\002\000\036\014\016" +
    "\015\025\016\017\017\026\040\045\041\035\044\040\047" +
    "\052\055\007\056\047\057\051\060\044\061\050\062\043" +
    "\001\002\000\046\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\045\uffe8\046\uffe8\050\uffe8\054" +
    "\uffe8\001\002\000\046\024\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\045\uffeb\046\uffeb\050\uffeb" +
    "\054\uffeb\001\002\000\004\050\115\001\002\000\036\026" +
    "\070\027\065\030\057\031\062\032\074\033\066\034\072" +
    "\035\061\040\060\041\063\042\064\045\071\046\067\050" +
    "\073\001\002\000\026\040\045\041\035\044\040\047\052" +
    "\055\007\056\047\057\051\060\044\061\050\062\043\001" +
    "\002\000\026\040\045\041\035\044\040\047\052\055\007" +
    "\056\047\057\051\060\044\061\050\062\043\001\002\000" +
    "\026\040\045\041\035\044\040\047\052\055\007\056\047" +
    "\057\051\060\044\061\050\062\043\001\002\000\026\040" +
    "\045\041\035\044\040\047\052\055\007\056\047\057\051" +
    "\060\044\061\050\062\043\001\002\000\026\040\045\041" +
    "\035\044\040\047\052\055\007\056\047\057\051\060\044" +
    "\061\050\062\043\001\002\000\026\040\045\041\035\044" +
    "\040\047\052\055\007\056\047\057\051\060\044\061\050" +
    "\062\043\001\002\000\026\040\045\041\035\044\040\047" +
    "\052\055\007\056\047\057\051\060\044\061\050\062\043" +
    "\001\002\000\026\040\045\041\035\044\040\047\052\055" +
    "\007\056\047\057\051\060\044\061\050\062\043\001\002" +
    "\000\026\040\045\041\035\044\040\047\052\055\007\056" +
    "\047\057\051\060\044\061\050\062\043\001\002\000\026" +
    "\040\045\041\035\044\040\047\052\055\007\056\047\057" +
    "\051\060\044\061\050\062\043\001\002\000\026\040\045" +
    "\041\035\044\040\047\052\055\007\056\047\057\051\060" +
    "\044\061\050\062\043\001\002\000\026\040\045\041\035" +
    "\044\040\047\052\055\007\056\047\057\051\060\044\061" +
    "\050\062\043\001\002\000\046\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\045\uffe3\046\uffe3" +
    "\050\uffe3\054\uffe3\001\002\000\026\040\045\041\035\044" +
    "\040\047\052\055\007\056\047\057\051\060\044\061\050" +
    "\062\043\001\002\000\046\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\040\060\041\063\042\uffd9\043\uffd9\045\071\046\067\050" +
    "\uffd9\054\uffd9\001\002\000\046\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\040\060\041\063\042\uffd7\043\uffd7\045\071\046\067" +
    "\050\uffd7\054\uffd7\001\002\000\046\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\045\uffdd\046" +
    "\uffdd\050\uffdd\054\uffdd\001\002\000\046\024\uffd4\025\uffd4" +
    "\026\uffd4\027\065\030\057\031\062\032\074\033\066\034" +
    "\072\035\061\040\060\041\063\042\uffd4\043\uffd4\045\071" +
    "\046\067\050\uffd4\054\uffd4\001\002\000\046\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\045" +
    "\uffdc\046\uffdc\050\uffdc\054\uffdc\001\002\000\046\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\040\060\041\063\042\uffd8\043\uffd8" +
    "\045\071\046\067\050\uffd8\054\uffd8\001\002\000\046\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\057\031\062\032\074" +
    "\033\066\034\072\035\061\040\060\041\063\042\uffd3\043" +
    "\uffd3\045\071\046\067\050\uffd3\054\uffd3\001\002\000\034" +
    "\026\070\027\065\030\057\031\062\032\074\033\066\034" +
    "\072\035\061\040\060\041\063\043\105\045\071\046\067" +
    "\001\002\000\026\040\045\041\035\044\040\047\052\055" +
    "\007\056\047\057\051\060\044\061\050\062\043\001\002" +
    "\000\034\026\070\027\065\030\057\031\062\032\074\033" +
    "\066\034\072\035\061\040\060\041\063\045\071\046\067" +
    "\050\107\001\002\000\046\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2\050" +
    "\uffd2\054\uffd2\001\002\000\046\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\045\071\046\067" +
    "\050\uffde\054\uffde\001\002\000\046\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\040\060\041\063\042\uffda\043\uffda\045\071\046" +
    "\067\050\uffda\054\uffda\001\002\000\046\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\040\060\041\063\042\uffd5\043\uffd5\045\071" +
    "\046\067\050\uffd5\054\uffd5\001\002\000\046\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\045" +
    "\071\046\067\050\uffdb\054\uffdb\001\002\000\046\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\062\032\074\033" +
    "\066\034\072\035\061\040\060\041\063\042\uffd6\043\uffd6" +
    "\045\071\046\067\050\uffd6\054\uffd6\001\002\000\026\040" +
    "\045\041\035\044\040\047\052\055\007\056\047\057\051" +
    "\060\044\061\050\062\043\001\002\000\046\024\uffdf\025" +
    "\uffdf\026\070\027\065\030\057\031\062\032\074\033\066" +
    "\034\072\035\061\040\060\041\063\042\uffdf\043\uffdf\045" +
    "\071\046\067\050\uffdf\054\uffdf\001\002\000\046\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\045\071\046\067\050\uffe1\054\uffe1\001\002\000\026\040" +
    "\045\041\035\044\040\047\052\055\007\056\047\057\051" +
    "\060\044\061\050\062\043\001\002\000\030\040\045\041" +
    "\035\044\040\047\052\050\124\055\007\056\047\057\051" +
    "\060\044\061\050\062\043\001\002\000\004\050\127\001" +
    "\002\000\036\025\125\026\070\027\065\030\057\031\062" +
    "\032\074\033\066\034\072\035\061\040\060\041\063\045" +
    "\071\046\067\050\uffc1\001\002\000\046\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\040\uffea\041\uffea\042\uffea\043\uffea\045\uffea" +
    "\046\uffea\050\uffea\054\uffea\001\002\000\026\040\045\041" +
    "\035\044\040\047\052\055\007\056\047\057\051\060\044" +
    "\061\050\062\043\001\002\000\004\050\uffc2\001\002\000" +
    "\046\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\045\uffe9\046\uffe9\050\uffe9\054\uffe9\001\002" +
    "\000\034\026\070\027\065\030\057\031\062\032\074\033" +
    "\066\034\072\035\061\040\060\041\063\045\071\046\067" +
    "\054\131\001\002\000\054\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\045\uffca\046\uffca\050\uffca\054\uffca\001\002\000\046" +
    "\024\uffe2\025\uffe2\026\070\027\065\030\057\031\062\032" +
    "\074\033\066\034\072\035\061\040\060\041\063\042\uffe2" +
    "\043\uffe2\045\071\046\067\050\uffe2\054\uffe2\001\002\000" +
    "\046\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\045\071\046\067\050\uffe0\054\uffe0\001\002" +
    "\000\012\023\031\024\uffb1\047\136\053\135\001\002\000" +
    "\006\054\uffb3\056\047\001\002\000\014\014\016\015\025" +
    "\016\017\017\026\050\uffbe\001\002\000\004\024\141\001" +
    "\002\000\040\004\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\022" +
    "\uffb7\051\uffb7\052\uffb7\055\uffb7\001\002\000\040\004\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\022\uffb6\051\uffb6\052\uffb6" +
    "\055\uffb6\001\002\000\006\025\261\050\uffbf\001\002\000" +
    "\004\055\007\001\002\000\004\050\145\001\002\000\004" +
    "\051\146\001\002\000\036\004\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\051\uffb9\052\uffb9\055\uffb9\001\002\000\036\004" +
    "\154\007\152\010\150\011\160\012\157\013\153\014\016" +
    "\015\025\016\017\017\026\020\024\051\161\052\ufff9\055" +
    "\007\001\002\000\004\047\245\001\002\000\004\055\007" +
    "\001\002\000\004\047\240\001\002\000\030\024\235\040" +
    "\045\041\035\044\040\047\052\055\007\056\047\057\051" +
    "\060\044\061\050\062\043\001\002\000\004\047\224\001" +
    "\002\000\014\023\uffcb\036\uffcb\037\uffcb\047\216\053\120" +
    "\001\002\000\004\052\214\001\002\000\004\047\210\001" +
    "\002\000\004\047\201\001\002\000\036\004\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\051\uffb9\052\uffb9\055\uffb9\001\002" +
    "\000\030\004\154\005\ufff9\006\ufff9\007\152\010\150\011" +
    "\160\012\157\013\153\051\161\052\ufff9\055\007\001\002" +
    "\000\010\023\164\036\165\037\166\001\002\000\026\040" +
    "\045\041\035\044\040\047\052\055\007\056\047\057\051" +
    "\060\044\061\050\062\043\001\002\000\004\024\170\001" +
    "\002\000\004\024\167\001\002\000\030\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\051" +
    "\uffee\052\uffee\055\uffee\001\002\000\030\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\051" +
    "\uffed\052\uffed\055\uffed\001\002\000\034\024\172\026\070" +
    "\027\065\030\057\031\062\032\074\033\066\034\072\035" +
    "\061\040\060\041\063\045\071\046\067\001\002\000\030" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\051\ufff6\052\ufff6\055\ufff6\001\002\000\010" +
    "\005\ufffa\006\ufffa\052\ufffa\001\002\000\036\004\154\007" +
    "\152\010\150\011\160\012\157\013\153\014\016\015\025" +
    "\016\017\017\026\020\024\051\161\052\ufff9\055\007\001" +
    "\002\000\004\052\176\001\002\000\032\004\uffaf\005\uffaf" +
    "\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\024" +
    "\177\051\uffaf\052\uffaf\055\uffaf\001\002\000\042\004\uffb0" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\022\uffb0\051\uffb0" +
    "\052\uffb0\055\uffb0\001\002\000\030\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\051\uffec" +
    "\052\uffec\055\uffec\001\002\000\026\040\045\041\035\044" +
    "\040\047\052\055\007\056\047\057\051\060\044\061\050" +
    "\062\043\001\002\000\036\025\206\026\070\027\065\030" +
    "\057\031\062\032\074\033\066\034\072\035\061\040\060" +
    "\041\063\045\071\046\067\050\uffc4\001\002\000\004\050" +
    "\204\001\002\000\004\024\205\001\002\000\030\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\051\ufff4\052\ufff4\055\ufff4\001\002\000\026\040\045" +
    "\041\035\044\040\047\052\055\007\056\047\057\051\060" +
    "\044\061\050\062\043\001\002\000\004\050\uffc5\001\002" +
    "\000\004\050\uffc3\001\002\000\004\050\212\001\002\000" +
    "\004\024\213\001\002\000\030\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\051\ufff3\052" +
    "\ufff3\055\ufff3\001\002\000\020\014\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\022\uffaf\024\177\052\uffaf\001\002\000\016\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\022\ufffb\052\ufffb\001\002" +
    "\000\030\040\045\041\035\044\040\047\052\050\220\055" +
    "\007\056\047\057\051\060\044\061\050\062\043\001\002" +
    "\000\004\050\222\001\002\000\004\024\221\001\002\000" +
    "\030\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\051\ufff2\052\ufff2\055\ufff2\001\002\000" +
    "\004\024\223\001\002\000\030\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\051\ufff1\052" +
    "\ufff1\055\ufff1\001\002\000\026\040\045\041\035\044\040" +
    "\047\052\055\007\056\047\057\051\060\044\061\050\062" +
    "\043\001\002\000\034\026\070\027\065\030\057\031\062" +
    "\032\074\033\066\034\072\035\061\040\060\041\063\045" +
    "\071\046\067\050\226\001\002\000\026\004\154\005\ufff9" +
    "\006\ufff9\007\152\010\150\011\160\012\157\013\153\051" +
    "\161\055\007\001\002\000\006\005\231\006\230\001\002" +
    "\000\030\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\051\uffc8\052\uffc8\055\uffc8\001\002" +
    "\000\022\004\154\007\152\010\150\011\160\012\157\013" +
    "\153\051\161\055\007\001\002\000\030\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\051" +
    "\ufff8\052\ufff8\055\ufff8\001\002\000\004\006\234\001\002" +
    "\000\030\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\051\uffc9\052\uffc9\055\uffc9\001\002" +
    "\000\030\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\051\ufff0\052\ufff0\055\ufff0\001\002" +
    "\000\034\024\237\026\070\027\065\030\057\031\062\032" +
    "\074\033\066\034\072\035\061\040\060\041\063\045\071" +
    "\046\067\001\002\000\030\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\013\uffef\051\uffef\052\uffef" +
    "\055\uffef\001\002\000\026\040\045\041\035\044\040\047" +
    "\052\055\007\056\047\057\051\060\044\061\050\062\043" +
    "\001\002\000\034\026\070\027\065\030\057\031\062\032" +
    "\074\033\066\034\072\035\061\040\060\041\063\045\071" +
    "\046\067\050\242\001\002\000\022\004\154\007\152\010" +
    "\150\011\160\012\157\013\153\051\161\055\007\001\002" +
    "\000\030\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\051\ufff7\052\ufff7\055\ufff7\001\002" +
    "\000\010\023\031\024\uffb1\053\135\001\002\000\004\055" +
    "\007\001\002\000\006\025\253\050\uffc6\001\002\000\004" +
    "\050\251\001\002\000\010\025\uffcb\050\uffcb\053\120\001" +
    "\002\000\004\024\252\001\002\000\030\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\051" +
    "\ufff5\052\ufff5\055\ufff5\001\002\000\004\055\007\001\002" +
    "\000\004\050\uffc7\001\002\000\010\025\uffbb\050\uffbb\053" +
    "\257\001\002\000\006\025\uffbd\050\uffbd\001\002\000\004" +
    "\054\260\001\002\000\006\025\uffbc\050\uffbc\001\002\000" +
    "\014\014\016\015\025\016\017\017\026\050\uffbe\001\002" +
    "\000\004\050\uffc0\001\002\000\004\054\uffb4\001\002\000" +
    "\004\054\265\001\002\000\004\024\266\001\002\000\040" +
    "\004\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\022\uffb5\051\uffb5" +
    "\052\uffb5\055\uffb5\001\002\000\004\047\270\001\002\000" +
    "\014\014\016\015\025\016\017\017\026\050\uffbe\001\002" +
    "\000\004\050\272\001\002\000\004\051\273\001\002\000" +
    "\036\004\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\051\uffb9\052" +
    "\uffb9\055\uffb9\001\002\000\036\004\154\007\152\010\150" +
    "\011\160\012\157\013\153\014\016\015\025\016\017\017" +
    "\026\020\024\051\161\052\ufff9\055\007\001\002\000\004" +
    "\052\276\001\002\000\020\014\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\022\uffaf\024\177\052\uffaf\001\002\000\016\014\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\022\ufffc\052\ufffc\001\002\000" +
    "\004\052\ufffe\001\002\000\004\055\007\001\002\000\004" +
    "\047\136\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\016\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\011\031\010\001\001\000\012\004\017\005" +
    "\014\030\022\036\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\277\005\014\036" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\266\001\001\000\004\016\133\001" +
    "\001\000\002\001\001\000\004\036\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\027\001\001\000" +
    "\004\035\031\001\001\000\022\010\041\011\052\012\033" +
    "\013\035\014\036\015\045\016\040\017\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\010\132\011\052\012\033\013\035\014\036\015\045\016" +
    "\040\017\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\010\131\011\052\012\033\013\035\014\036\015" +
    "\045\016\040\017\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\010" +
    "\116\011\052\012\033\013\035\014\036\015\045\016\040" +
    "\017\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\055\011\052" +
    "\012\033\013\035\014\036\015\045\016\040\017\053\036" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\010\113\011\052\012" +
    "\033\013\035\014\036\015\045\016\040\017\053\001\001" +
    "\000\022\010\112\011\052\012\033\013\035\014\036\015" +
    "\045\016\040\017\053\001\001\000\022\010\111\011\052" +
    "\012\033\013\035\014\036\015\045\016\040\017\053\001" +
    "\001\000\022\010\110\011\052\012\033\013\035\014\036" +
    "\015\045\016\040\017\053\001\001\000\022\010\107\011" +
    "\052\012\033\013\035\014\036\015\045\016\040\017\053" +
    "\001\001\000\022\010\103\011\052\012\033\013\035\014" +
    "\036\015\045\016\040\017\053\001\001\000\022\010\102" +
    "\011\052\012\033\013\035\014\036\015\045\016\040\017" +
    "\053\001\001\000\022\010\101\011\052\012\033\013\035" +
    "\014\036\015\045\016\040\017\053\001\001\000\022\010" +
    "\100\011\052\012\033\013\035\014\036\015\045\016\040" +
    "\017\053\001\001\000\022\010\077\011\052\012\033\013" +
    "\035\014\036\015\045\016\040\017\053\001\001\000\022" +
    "\010\076\011\052\012\033\013\035\014\036\015\045\016" +
    "\040\017\053\001\001\000\022\010\075\011\052\012\033" +
    "\013\035\014\036\015\045\016\040\017\053\001\001\000" +
    "\002\001\001\000\022\010\074\011\052\012\033\013\035" +
    "\014\036\015\045\016\040\017\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\105\011\052\012\033\013\035" +
    "\014\036\015\045\016\040\017\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\115\011\052\012\033\013\035\014\036\015\045" +
    "\016\040\017\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\127\011\052\012\033\013\035\014\036" +
    "\015\045\016\040\017\053\001\001\000\024\010\122\011" +
    "\052\012\033\013\035\014\036\015\045\016\040\017\053" +
    "\024\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\122\011\052\012\033\013\035" +
    "\014\036\015\045\016\040\017\053\024\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\137\035\136\001\001\000\006\011\262\033\263\001\001" +
    "\000\010\025\143\026\141\036\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\146\001\001\000\016\006\155\007\161" +
    "\016\154\017\162\030\022\036\150\001\001\000\002\001" +
    "\001\000\004\016\243\001\001\000\002\001\001\000\022" +
    "\010\235\011\052\012\033\013\035\014\036\015\045\016" +
    "\040\017\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\173\001\001\000\012\006\172\007\161\016\154" +
    "\017\162\001\001\000\002\001\001\000\022\010\170\011" +
    "\052\012\033\013\035\014\036\015\045\016\040\017\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\174\007\161\016\154\017" +
    "\162\030\022\036\150\001\001\000\002\001\001\000\004" +
    "\034\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\010\201\011\052\012\033\013\035\014\036\015\045" +
    "\016\040\017\053\022\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\201\011\052\012\033\013\035\014\036\015\045\016" +
    "\040\017\053\022\206\001\001\000\002\001\001\000\004" +
    "\023\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\214\001\001\000\002\001\001" +
    "\000\024\010\122\011\052\012\033\013\035\014\036\015" +
    "\045\016\040\017\053\024\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\224\011\052\012\033\013\035" +
    "\014\036\015\045\016\040\017\053\001\001\000\002\001" +
    "\001\000\012\006\226\007\161\016\154\017\162\001\001" +
    "\000\004\020\231\001\001\000\002\001\001\000\010\007" +
    "\232\016\154\017\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\240\011\052\012\033" +
    "\013\035\014\036\015\045\016\040\017\053\001\001\000" +
    "\002\001\001\000\010\007\242\016\154\017\162\001\001" +
    "\000\002\001\001\000\006\032\137\035\136\001\001\000" +
    "\010\016\247\017\245\021\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\247\017\245\021\253\001\001" +
    "\000\002\001\001\000\004\027\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\261" +
    "\026\141\036\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\025\270\026\141\036\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\273" +
    "\001\001\000\016\006\274\007\161\016\154\017\162\030" +
    "\022\036\150\001\001\000\002\001\001\000\004\034\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\301\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS ident LBRAC members RBRAC SEMI 
            {
              ProgramAST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdentAST i = (IdentAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MembersAST m = (MembersAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProgramAST(i,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramAST start_val = (ProgramAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // members ::= fields methods 
            {
              MembersAST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldsAST f = (FieldsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodsAST m = (MethodsAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MembersAST(f,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("members",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // methods ::= method methods 
            {
              MethodsAST RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodAST m = (MethodAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodsAST s = (MethodsAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodsAST(m,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methods",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // methods ::= 
            {
              MethodsAST RESULT =null;
		 RESULT = new MethodsAST(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methods",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // method ::= VOID ident LPAR argdecls RPAR LBRAC fields stmts RBRAC optsemi 
            {
              MethodAST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		IdentAST i = (IdentAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArgDeclsAST a = (ArgDeclsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FieldsAST f = (FieldsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StmtsAST s = (StmtsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OptSemiAST o = (OptSemiAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodAST(i,a,f,s,o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // method ::= type ident LPAR argdecls RPAR LBRAC fields stmts RBRAC optsemi 
            {
              MethodAST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		TypeAST t = (TypeAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		IdentAST i = (IdentAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArgDeclsAST a = (ArgDeclsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FieldsAST f = (FieldsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StmtsAST s = (StmtsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OptSemiAST o = (OptSemiAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodAST(t,i,a,f,s,o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmts ::= stmt stmts 
            {
              StmtsAST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtAST t = (StmtAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtsAST s = (StmtsAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtsAST(t,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmts ::= 
            {
              StmtsAST RESULT =null;
		 RESULT = new StmtsAST(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= IF LPAR expression RPAR stmts optelse 
            {
              StmtAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtsAST s = (StmtsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OptElseStmtAST o = (OptElseStmtAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStmtAST(e,s,o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= WHILE LPAR expression RPAR stmt 
            {
              StmtAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtAST s = (StmtAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileStmtAST(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= name EQUALS expression SEMI 
            {
              StmtAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NameAST n = (NameAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignStmtAST(n,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= READ LPAR readlist RPAR SEMI 
            {
              StmtAST RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReadListAST r = (ReadListAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ReadStmtAST(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= PRINT LPAR printlist RPAR SEMI 
            {
              StmtAST RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PrintListAST p = (PrintListAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PrintStmtAST(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= PRINTLN LPAR printlnlist RPAR SEMI 
            {
              StmtAST RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PrintlnListAST p = (PrintlnListAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PrintlnStmtAST(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= ident LPAR RPAR SEMI 
            {
              StmtAST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdentAST i = (IdentAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new IdentStmtAST(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= ident LPAR args RPAR SEMI 
            {
              StmtAST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdentAST i = (IdentAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgsAST a = (ArgsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IdentStmtAST(i,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= RETURN SEMI 
            {
              StmtAST RESULT =null;
		 RESULT = new ReturnStmtAST(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= RETURN expression SEMI 
            {
              StmtAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmtAST(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= name INCREMENT SEMI 
            {
              StmtAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameAST n = (NameAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IncrementStmtAST(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= name DECREMENT SEMI 
            {
              StmtAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameAST n = (NameAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DecrementStmtAST(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= LBRAC fields stmts RBRAC optsemi 
            {
              StmtAST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FieldsAST f = (FieldsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StmtsAST s = (StmtsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OptSemiAST o = (OptSemiAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldStmtAST(f,s,o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= name 
            {
              ExprAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NameAST n = (NameAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= ident LPAR RPAR 
            {
              ExprAST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdentAST i = (IdentAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IdentExprAST(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= ident LPAR args RPAR 
            {
              ExprAST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdentAST i = (IdentAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgsAST a = (ArgsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IdentExprAST(i,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= int_lit 
            {
              ExprAST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntAST i = (IntAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= char_lit 
            {
              ExprAST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CharAST c = (CharAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= str_lit 
            {
              ExprAST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StrAST s = (StrAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= float_lit 
            {
              ExprAST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FloatAST f = (FloatAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= bool_lit 
            {
              ExprAST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolAST b = (BoolAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= LPAR expression RPAR 
            {
              ExprAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= TILDE expression 
            {
              ExprAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TildeExprAST(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= MINUS expression 
            {
              ExprAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusExprAST(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= PLUS expression 
            {
              ExprAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlusExprAST(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= LPAR type RPAR expression 
            {
              ExprAST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeAST t = (TypeAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeExprAST(t,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression PLUS expression 
            {
              ExprAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST l = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST r = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprAST(l,"+",r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression TIMES expression 
            {
              ExprAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST l = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST r = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprAST(l,"*",r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression DIV expression 
            {
              ExprAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST l = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST r = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprAST(l,"/",r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression MINUS expression 
            {
              ExprAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST l = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST r = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprAST(l,"-",r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression LESS_THAN expression 
            {
              ExprAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST l = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST r = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprAST(l,"<",r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression GREATER_THAN expression 
            {
              ExprAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST l = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST r = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprAST(l,">",r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression LESS_EQUAL expression 
            {
              ExprAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST l = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST r = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprAST(l,"<=",r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression GREATER_EQUAL expression 
            {
              ExprAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST l = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST r = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprAST(l,">=",r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression EQUAL_EQUAL expression 
            {
              ExprAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST l = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST r = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprAST(l,"==",r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression LESS_GREATER expression 
            {
              ExprAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST l = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST r = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprAST(l,"<>",r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression VERTICAL_BARS expression 
            {
              ExprAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST l = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST r = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprAST(l,"||",r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression AMPERSANDS expression 
            {
              ExprAST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST l = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST r = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprAST(l,"&&",r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= LPAR expression QUESTION expression COLON expression RPAR 
            {
              ExprAST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprAST e1 = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAST e2 = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAST e3 = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new QColExprAST(e1,e2,e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // int_lit ::= INT_LIT 
            {
              IntAST RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntAST(z); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_lit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // char_lit ::= CHAR_LIT 
            {
              CharAST RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CharAST(z); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("char_lit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // str_lit ::= STR_LIT 
            {
              StrAST RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StrAST(z); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("str_lit",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // float_lit ::= FLOAT_LIT 
            {
              FloatAST RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatAST(z); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float_lit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bool_lit ::= BOOL_LIT 
            {
              BoolAST RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolAST(z); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_lit",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ident ::= IDENT 
            {
              IdentAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentAST(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // name ::= ident 
            {
              NameAST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdentAST i = (IdentAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NameAST(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // name ::= ident LSBRAC expression RSBRAC 
            {
              NameAST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdentAST i = (IdentAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NameAST(i,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // optelse ::= ELSE stmt FI 
            {
              OptElseStmtAST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtAST s = (StmtAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OptElseStmtAST(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optelse",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // optelse ::= FI 
            {
              OptElseStmtAST RESULT =null;
		 RESULT = new OptElseStmtAST(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optelse",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // readlist ::= name COMMA readlist 
            {
              ReadListAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameAST n = (NameAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReadListAST r = (ReadListAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadListAST(n,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // readlist ::= name 
            {
              ReadListAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NameAST n = (NameAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadListAST(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // printlist ::= expression COMMA printlist 
            {
              PrintListAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrintListAST p = (PrintListAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrintListAST(e,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // printlist ::= expression 
            {
              PrintListAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrintListAST(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // printlnlist ::= 
            {
              PrintlnListAST RESULT =null;
		 RESULT = new PrintlnListAST(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlnlist",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // args ::= expression COMMA args 
            {
              ArgsAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgsAST a = (ArgsAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgsAST(e,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // args ::= expression 
            {
              ArgsAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgsAST(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // argdecls ::= argdecl COMMA argdecls 
            {
              ArgDeclsAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgDeclAST a = (ArgDeclAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgDeclsAST s = (ArgDeclsAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgDeclsAST(a,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // argdecls ::= argdecl 
            {
              ArgDeclsAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgDeclAST a = (ArgDeclAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgDeclsAST(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // argdecls ::= 
            {
              ArgDeclsAST RESULT =null;
		 RESULT = new ArgDeclsAST(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // argdecl ::= type ident optbracs 
            {
              ArgDeclAST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeAST t = (TypeAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdentAST i = (IdentAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OptBracsAST o = (OptBracsAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgDeclAST(t,i,o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // optbracs ::= LSBRAC RSBRAC 
            {
              OptBracsAST RESULT =null;
		 RESULT = new OptBracsAST("[]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optbracs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // optbracs ::= 
            {
              OptBracsAST RESULT =null;
		 RESULT = new OptBracsAST(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optbracs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fields ::= fields field 
            {
              FieldsAST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldsAST s = (FieldsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldAST f = (FieldAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldsAST(s,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fields",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // fields ::= 
            {
              FieldsAST RESULT =null;
		 RESULT = new FieldsAST(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fields",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // field ::= FINAL type ident optexpression SEMI 
            {
              FieldAST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeAST t = (TypeAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdentAST i = (IdentAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OptExprAST e = (OptExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FinalDeclAST(t,i,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // field ::= type ident fieldprime 
            {
              FieldAST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeAST t = (TypeAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdentAST i = (IdentAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldPrimeAST p = (FieldPrimeAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldDeclAST(t,i,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // fieldprime ::= optexpression SEMI 
            {
              FieldPrimeAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OptExprAST e = (OptExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FieldPrimeAST(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldprime",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // fieldprime ::= LSBRAC optint RSBRAC SEMI 
            {
              FieldPrimeAST RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		OptIntAST o = (OptIntAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FieldPrimeAST(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldprime",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // optint ::= int_lit 
            {
              OptIntAST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntAST n = (IntAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OptIntAST(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optint",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // optint ::= 
            {
              OptIntAST RESULT =null;
		 RESULT = new OptIntAST(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optint",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // optexpression ::= EQUALS expression 
            {
              OptExprAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprAST e = (ExprAST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OptExprAST(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optexpression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // optexpression ::= 
            {
              OptExprAST RESULT =null;
		 RESULT = new OptExprAST(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optexpression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // optsemi ::= SEMI 
            {
              OptSemiAST RESULT =null;
		 RESULT = new OptSemiAST(";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optsemi",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // optsemi ::= 
            {
              OptSemiAST RESULT =null;
		 RESULT = new OptSemiAST(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optsemi",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type ::= INT 
            {
              TypeAST RESULT =null;
		 RESULT = new TypeAST("int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type ::= CHAR 
            {
              TypeAST RESULT =null;
		 RESULT = new TypeAST("char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type ::= BOOL 
            {
              TypeAST RESULT =null;
		 RESULT = new TypeAST("bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type ::= FLOAT 
            {
              TypeAST RESULT =null;
		 RESULT = new TypeAST("float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
